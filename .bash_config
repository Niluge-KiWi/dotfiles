#!/bin/bash
## .bashrc versionned config ##

## How to use : add this to .bashrc

# [ -f ~/.bash_config ] && . ~/.bash_config


## from debian ##

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# don't put duplicate lines in the history. See bash(1) for more options
export HISTCONTROL=ignoredups

# append to the history file, don't overwrite it
shopt -s histappend

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
if [ -x /usr/bin/lesspipe ]; then
   eval "$(lesspipe)"
fi

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi



# set a fancy prompt (no color if dumb term)
case "$TERM" in
dumb)
    PS1='[${debian_chroot:+($debian_chroot)}\u@\h \w][\A]$ '
    ;;
*)
    DEFAULT="\[\033[0m\]"
    BOLD="\[\033[1m\]"
    UNDERLINE="\[\033[4m\]"
    BLUE="\[\033[1;34m\]"
    LIGHT_BLUE="\[\033[0;34m\]"
    PS1="[\${debian_chroot:+(\$debian_chroot)}$BLUE\u$DEFAULT@$UNDERLINE\h$DEFAULT \w][\A](\$?)\$ "
    ;;
esac
export PS1

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME}: ${PWD/$HOME/~}\007"'
    ;;
*)
    ;;
esac

# enable color support of ls and grep
if [ "$TERM" != "dumb" ]; then
    eval "`dircolors -b`"
    alias ls='ls --color=auto'
    alias grep='grep --color=auto'
fi


## alias and functions ##

# emacs
function emacs-client
{
    # if only one argument, and is a grep result, open file on the good line
    if [ $# -eq 1 ]; then
        local fileline="$1"
        if echo "$fileline" | grep -q '.*:[0-9]\+:.*$'; then
            local file="$(echo "$fileline" | awk -F: '{print $1'})"
            local line="$(echo "$fileline" | awk -F: '{print $(NF-1)'})"
            emacsclient -a "" -c +$line "$file"
            return
        fi
        if echo "$fileline" | grep -q '.*:[0-9]\+$'; then
            local file="$(echo "$fileline" | awk -F: '{print $1'})"
            local line="$(echo "$fileline" | awk -F: '{print $NF'})"
            emacsclient -a "" -c +$line "$file"
            return
        fi
    fi
    emacsclient -a "" -c "$@"
}
function ec
{
    if [ -z "$DISPLAY" ]; then
        # no x term
        emacs-client "$@"
    else
        # x term: we fork
        emacs-client "$@" > /dev/null &
    fi
}
alias e='ec'
export EDITOR='emacsclient -a "" -c'

# gdb
alias gdb='gdb --args'

# alias autres
alias p='ps aux | grep -i'
alias pp='ps aux | grep'
alias c='cd ..'
alias ..='cd ..'
alias tf='tail -F'

# svn
alias sd='svn diff --diff-cmd colordiff'
function sdl { sd $@ | less -RXF; }

# git
alias ga='git add'
alias gb='git branch'
alias gba='git branch -a'
alias gc='git commit'
alias gcm='git commit -m'
alias gd='git diff --color'
alias gdc='git diff --color --cached'
alias gf='git fetch'
alias gu='gf && gr'
alias gp='git push'
alias gr='git rebase origin/master'
alias gst='git status | less -RXF'
alias gl='git log'
alias gk='gitk --all&'

# bash history
export HISTSIZE=5000
export HISTFILESIZE=5000

# divers
alias o='xdg-open'
alias ll='ls -l'
alias la='ls -A'
alias l='ls -latrh'
alias lh='ls -latr'
alias lS='ls -laSrh'

alias g='grep -nriI --color --exclude=*~ --exclude ".#*"'
alias gg='grep -nrI --color --exclude=*~ --exclude ".#*"'
alias gs='g --exclude-dir=\.svn'
alias ggs='gg --exclude-dir=\.svn'
alias ggg='gg --exclude-dir=\.git'

alias f='find . -iname'

alias sum="awk '{sum+=\$1} END {print sum}'"

alias w='wc -l'

# useless mais bon
alias jacadi='sudo'
alias siteuplait='sudo'


# cd does a ls after a cd
# unless we are in /usr or /lib (lots of file in there...)
cd() {
    builtin cd "$@"
    # pas réussi à faire ça en un seul test...
    if [ -z $(echo "$PWD" | grep "^/usr\|^/lib") ] && [ "$PWD" != "$HOME" ]; then
	ls
    fi
}


# un copy par ssh
# tar cvf - /tarred_up_director | ssh -l root Linux_Server 'cd /tmp ; tar xf -'

# multiline sed (from http://austinmatzko.com/2008/04/26/sed-multi-line-search-and-replace/)
sedml() {
   +    sed -n '
# if the first line copy the pattern to the hold buffer
1h
# if not the first line then append the pattern to the hold buffer
1!H
# if the last line then ...
$ {
        # copy from the hold to the pattern buffer
        g
        # do the search and replace
        '"$2"'
        # print
        p
}
'
}


# own bin
export PATH=$HOME/bin:$PATH
